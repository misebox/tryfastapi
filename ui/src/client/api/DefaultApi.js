/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnyType from '../model/AnyType';
import HTTPValidationError from '../model/HTTPValidationError';
import UserCreate from '../model/UserCreate';
import UserSelect from '../model/UserSelect';
import UserUpdate from '../model/UserUpdate';

/**
* Default service.
* @module api/DefaultApi
* @version 0.1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the helloGet operation.
     * @callback module:api/DefaultApi~helloGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnyType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Hello
     * @param {module:api/DefaultApi~helloGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnyType}
     */
    helloGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnyType;
      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersCreateUsersCreatePost operation.
     * @callback module:api/DefaultApi~usersCreateUsersCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserSelect} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Users Create
     * @param {module:model/UserCreate} userCreate 
     * @param {module:api/DefaultApi~usersCreateUsersCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserSelect}
     */
    usersCreateUsersCreatePost(userCreate, callback) {
      let postBody = userCreate;
      // verify the required parameter 'userCreate' is set
      if (userCreate === undefined || userCreate === null) {
        throw new Error("Missing the required parameter 'userCreate' when calling usersCreateUsersCreatePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserSelect;
      return this.apiClient.callApi(
        '/users/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersDeleteUsersDeletePost operation.
     * @callback module:api/DefaultApi~usersDeleteUsersDeletePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnyType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Users Delete
     * @param {module:model/UserUpdate} userUpdate 
     * @param {module:api/DefaultApi~usersDeleteUsersDeletePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnyType}
     */
    usersDeleteUsersDeletePost(userUpdate, callback) {
      let postBody = userUpdate;
      // verify the required parameter 'userUpdate' is set
      if (userUpdate === undefined || userUpdate === null) {
        throw new Error("Missing the required parameter 'userUpdate' when calling usersDeleteUsersDeletePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnyType;
      return this.apiClient.callApi(
        '/users/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersFindallUsersGet operation.
     * @callback module:api/DefaultApi~usersFindallUsersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserSelect>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Users Findall
     * @param {module:api/DefaultApi~usersFindallUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserSelect>}
     */
    usersFindallUsersGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserSelect];
      return this.apiClient.callApi(
        '/users/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersFindoneUsersFindGet operation.
     * @callback module:api/DefaultApi~usersFindoneUsersFindGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserSelect} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Users Findone
     * @param {Number} id 
     * @param {module:api/DefaultApi~usersFindoneUsersFindGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserSelect}
     */
    usersFindoneUsersFindGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersFindoneUsersFindGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserSelect;
      return this.apiClient.callApi(
        '/users/find', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUpdateUsersUpdatePost operation.
     * @callback module:api/DefaultApi~usersUpdateUsersUpdatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserSelect} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Users Update
     * @param {module:model/UserUpdate} userUpdate 
     * @param {module:api/DefaultApi~usersUpdateUsersUpdatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserSelect}
     */
    usersUpdateUsersUpdatePost(userUpdate, callback) {
      let postBody = userUpdate;
      // verify the required parameter 'userUpdate' is set
      if (userUpdate === undefined || userUpdate === null) {
        throw new Error("Missing the required parameter 'userUpdate' when calling usersUpdateUsersUpdatePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserSelect;
      return this.apiClient.callApi(
        '/users/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
